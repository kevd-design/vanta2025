/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type CTA = {
  _type: "CTA";
  linkLabel?: string;
  linkType?: "toProject" | "toPage" | "externalLink";
  toProject?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "project";
  };
  toPage?: "home" | "projects" | "about" | "reviews" | "contact";
  externalLink?: string;
};

export type SiteSettingsSingleton = {
  _id: string;
  _type: "siteSettingsSingleton";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  homePageNavLabel?: string;
  projectsPageNavLabel?: string;
  aboutPageNavLabel?: string;
  reviewsPageNavLabel?: string;
  contactPageNavLabel?: string;
  mobileBackgroundImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    decorative?: boolean;
    changed?: boolean;
    _type: "imageWithMetadata";
  };
  displayCopyright?: boolean;
  textBeforeCopyright?: string;
  copyrightText?: string;
  copyrightYear?: boolean;
  textAfterCopyright?: string;
  Sitetitle?: string;
  description?: string;
  heroHeadline?: string;
  heroImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    decorative?: boolean;
    changed?: boolean;
    _type: "imageWithMetadata";
  };
  heroCTA?: {
    linkLabel?: string;
    linkType?: "toProject" | "toPage" | "externalLink";
    toProject?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "project";
    };
    toPage?: "home" | "projects" | "about" | "reviews" | "contact";
    externalLink?: string;
  };
  projectCTA?: {
    linkLabel?: string;
    linkType?: "toProject" | "toPage" | "externalLink";
    toProject?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "project";
    };
    toPage?: "home" | "projects" | "about" | "reviews" | "contact";
    externalLink?: string;
  };
  servicesTitle?: string;
  servicesDescription?: string;
  backgroundImageServices?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    decorative?: boolean;
    changed?: boolean;
    _type: "imageWithMetadata";
  };
  servicesCTA?: {
    linkLabel?: string;
    linkType?: "toProject" | "toPage" | "externalLink";
    toProject?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "project";
    };
    toPage?: "home" | "projects" | "about" | "reviews" | "contact";
    externalLink?: string;
  };
  reviewerName?: string;
  reviewText?: string;
  reviewCTA?: {
    linkLabel?: string;
    linkType?: "toProject" | "toPage" | "externalLink";
    toProject?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "project";
    };
    toPage?: "home" | "projects" | "about" | "reviews" | "contact";
    externalLink?: string;
  };
  projectIndexPageTitle?: string;
  projectIndexPageDescription?: string;
  gallaryTitle?: string;
  aboutPageTitle?: string;
  aboutPageHeroImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    decorative?: boolean;
    changed?: boolean;
    _type: "imageWithMetadata";
  };
  reviewPageTitle?: string;
  reviewPageBackgroundImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    decorative?: boolean;
    changed?: boolean;
    _type: "imageWithMetadata";
  };
  reviewPageDescriptiveImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    decorative?: boolean;
    changed?: boolean;
    _type: "imageWithMetadata";
  };
  reviewPageSummary?: string;
  viewReviewsCTA?: {
    linkLabel?: string;
    linkType?: "toProject" | "toPage" | "externalLink";
    toProject?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "project";
    };
    toPage?: "home" | "projects" | "about" | "reviews" | "contact";
    externalLink?: string;
  };
  submitReviewTitle?: string;
  submitReviewInvitation?: string;
  submitReviewCTA?: {
    linkLabel?: string;
    linkType?: "toProject" | "toPage" | "externalLink";
    toProject?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "project";
    };
    toPage?: "home" | "projects" | "about" | "reviews" | "contact";
    externalLink?: string;
  };
  contactPageTitle?: string;
  contactsPagebackgroundImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    decorative?: boolean;
    changed?: boolean;
    _type: "imageWithMetadata";
  };
  PhoneLabel?: string;
  PhoneNumber?: string;
  emailLabel?: string;
  emailAddress?: string;
  socialMediaLabel?: string;
  instagramIcon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    decorative?: boolean;
    changed?: boolean;
    _type: "imageWithMetadata";
  };
  instagramLink?: string;
  facebookIcon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    decorative?: boolean;
    changed?: boolean;
    _type: "imageWithMetadata";
  };
  facebookLink?: string;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  projectName?: string;
  projectSlug?: Slug;
  projectDescription?: string;
  projectImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    decorative?: boolean;
    changed?: boolean;
    _type: "imageWithMetadata";
  };
  projectGallery?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    decorative?: boolean;
    changed?: boolean;
    _type: "imageWithMetadata";
    _key: string;
  }>;
  projectNeighbourhood?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "neighbourhood";
  };
};

export type Neighbourhood = {
  _id: string;
  _type: "neighbourhood";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
};

export type PageNamesSingleton = {
  _id: string;
  _type: "pageNamesSingleton";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  rootPgName?: string;
  rootPgNameShort?: string;
  rootPgNameSlug?: string;
  projectsPgName?: string;
  projectsPgNameShort?: string;
  projectsPgNameSlug?: string;
  aboutPgName?: string;
  aboutPgNameShort?: string;
  aboutPgNameSlug?: string;
  reviewPgName?: string;
  reviewPgShort?: string;
  reviewPgSlug?: string;
  contactPgName?: string;
  contactPgNameShort?: string;
  contactPgNameSlug?: string;
};

export type CompanySettingsSingleton = {
  _id: string;
  _type: "companySettingsSingleton";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  logoForLightBG?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    decorative?: boolean;
    changed?: boolean;
    _type: "imageWithMetadata";
  };
  logoForDarkBG?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    decorative?: boolean;
    changed?: boolean;
    _type: "imageWithMetadata";
  };
  aboutHistory?: string;
  aboutMission?: string;
  aboutFounder?: string;
  founderImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    decorative?: boolean;
    changed?: boolean;
    _type: "imageWithMetadata";
  };
  aboutTeam?: string;
  teamImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    decorative?: boolean;
    changed?: boolean;
    _type: "imageWithMetadata";
  };
};

export type ImageWithMetadata = {
  _type: "imageWithMetadata";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  decorative?: boolean;
  changed?: boolean;
};

export type MediaTag = {
  _id: string;
  _type: "media.tag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | CTA | SiteSettingsSingleton | Project | Neighbourhood | PageNamesSingleton | CompanySettingsSingleton | ImageWithMetadata | MediaTag | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/app/(site)/page.tsx
// Variable: QUERY_NAV
// Query: *[_type == "siteSettingsSingleton"][0]{  homePageNavLabel,  projectsPageNavLabel,  aboutPageNavLabel,  reviewsPageNavLabel,  contactPageNavLabel,  mobileBackgroundImage {    ...,    asset->{      ...,      metadata    }  }}
export type QUERY_NAVResult = {
  homePageNavLabel: string | null;
  projectsPageNavLabel: string | null;
  aboutPageNavLabel: string | null;
  reviewsPageNavLabel: string | null;
  contactPageNavLabel: string | null;
  mobileBackgroundImage: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata: SanityImageMetadata | null;
      source?: SanityAssetSourceData;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    decorative?: boolean;
    changed?: boolean;
    _type: "imageWithMetadata";
  } | null;
} | null;
// Variable: QUERY_CTAs
// Query: *[_type == "siteSettingsSingleton"][0]{  reviewCTA,  heroCTA,  viewReviewsCTA,  submitReviewCTA,  servicesCTA,  projectCTA {    // keep all the normal CTA fields…    linkLabel, linkType,    // then pull in the referenced page’s slug    "toProjectSlug": toProject->projectSlug.current,     }}
export type QUERY_CTAsResult = {
  reviewCTA: {
    linkLabel?: string;
    linkType?: "externalLink" | "toPage" | "toProject";
    toProject?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "project";
    };
    toPage?: "about" | "contact" | "home" | "projects" | "reviews";
    externalLink?: string;
  } | null;
  heroCTA: {
    linkLabel?: string;
    linkType?: "externalLink" | "toPage" | "toProject";
    toProject?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "project";
    };
    toPage?: "about" | "contact" | "home" | "projects" | "reviews";
    externalLink?: string;
  } | null;
  viewReviewsCTA: {
    linkLabel?: string;
    linkType?: "externalLink" | "toPage" | "toProject";
    toProject?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "project";
    };
    toPage?: "about" | "contact" | "home" | "projects" | "reviews";
    externalLink?: string;
  } | null;
  submitReviewCTA: {
    linkLabel?: string;
    linkType?: "externalLink" | "toPage" | "toProject";
    toProject?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "project";
    };
    toPage?: "about" | "contact" | "home" | "projects" | "reviews";
    externalLink?: string;
  } | null;
  servicesCTA: {
    linkLabel?: string;
    linkType?: "externalLink" | "toPage" | "toProject";
    toProject?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "project";
    };
    toPage?: "about" | "contact" | "home" | "projects" | "reviews";
    externalLink?: string;
  } | null;
  projectCTA: {
    linkLabel: string | null;
    linkType: "externalLink" | "toPage" | "toProject" | null;
    toProjectSlug: string | null;
  } | null;
} | null;

// Source: ./src/app/(site)/queries/QUERY_LOGO.tsx
// Variable: QUERY_LOGO
// Query: *[_type == "companySettingsSingleton"][0]{  logoForLightBG {    asset->{      ...,      metadata {        dimensions,        lqip      },      altText,      title    }  },  logoForDarkBG {    asset->{      ...,      metadata {        dimensions,        lqip      },      altText,      title    }  }}
export type QUERY_LOGOResult = {
  logoForLightBG: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title: string | null;
      description?: string;
      altText: string | null;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata: {
        dimensions: SanityImageDimensions | null;
        lqip: string | null;
      } | null;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
  logoForDarkBG: {
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title: string | null;
      description?: string;
      altText: string | null;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata: {
        dimensions: SanityImageDimensions | null;
        lqip: string | null;
      } | null;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
} | null;

// Source: ./src/sanity/lib/queries.ts
// Variable: PROJECTS_QUERY
// Query: *[  _type == "project" && defined(projectSlug.current)][0...12]{    _id, projectName, projectSlug  }
export type PROJECTS_QUERYResult = Array<{
  _id: string;
  projectName: string | null;
  projectSlug: Slug | null;
}>;
// Variable: PROJECT_QUERY
// Query: *[  _type == "project" && projectSlug.current == $slug][0]{    _id, projectName, projectSlug, projectDescription  }
export type PROJECT_QUERYResult = {
  _id: string;
  projectName: string | null;
  projectSlug: Slug | null;
  projectDescription: string | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"siteSettingsSingleton\"][0]{\n  homePageNavLabel,\n  projectsPageNavLabel,\n  aboutPageNavLabel,\n  reviewsPageNavLabel,\n  contactPageNavLabel,\n  mobileBackgroundImage {\n    ...,\n    asset->{\n      ...,\n      metadata\n    }\n  }\n}": QUERY_NAVResult;
    "*[_type == \"siteSettingsSingleton\"][0]{\n  reviewCTA,\n  heroCTA,\n  viewReviewsCTA,\n  submitReviewCTA,\n  servicesCTA,\n  projectCTA {\n    // keep all the normal CTA fields\u2026\n    linkLabel, linkType,\n    // then pull in the referenced page\u2019s slug\n    \"toProjectSlug\": toProject->projectSlug.current,\n   \n  }\n}": QUERY_CTAsResult;
    "*[_type == \"companySettingsSingleton\"][0]{\n  logoForLightBG {\n    asset->{\n      ...,\n      metadata {\n        dimensions,\n        lqip\n      },\n      altText,\n      title\n    }\n  },\n  logoForDarkBG {\n    asset->{\n      ...,\n      metadata {\n        dimensions,\n        lqip\n      },\n      altText,\n      title\n    }\n  }\n}": QUERY_LOGOResult;
    "*[\n  _type == \"project\" && defined(projectSlug.current)][0...12]{\n    _id, projectName, projectSlug\n  }\n": PROJECTS_QUERYResult;
    "*[\n  _type == \"project\" && projectSlug.current == $slug][0]{\n    _id, projectName, projectSlug, projectDescription\n  }\n": PROJECT_QUERYResult;
  }
}
